<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.commb.dao.UserDao">

    <select id="userInfo" parameterType="Integer" resultMap="userInformation">
        SELECT distinct id, email, name, nickname, bookmark, bookmark_on as bookmarkOn, pencil, pencil_on as pencilOn, file_url,
               (SELECT COUNT(*) FROM follow WHERE follower = #{userId}) AS following,
               (SELECT COUNT(*) FROM follow WHERE following = #{userId}) AS follower,
               (SELECT COUNT(*) FROM follow WHERE follower = #{myUserId} and following = #{userId}) AS isFollow
        FROM user
        WHERE id = #{userId}
    </select>

    <select id="getMyFollowerExFollowing" parameterType="Integer" resultMap="userInformation">
        SELECT distinct u.id, NAME, nickname, file_url, 0 AS isFollow, bookmark, pencil, 5 as cnt
        FROM follow f2, user u
        WHERE u.id = f2.follower and f2.following = #{userId} AND f2.follower NOT IN (
            SELECT f1.following
            FROM follow f1
            WHERE f1.follower = #{userId})
        UNION
        SELECT u.id, NAME, nickname, file_url AS userFileUrl, 0 AS isFollow, bookmark, pencil, COUNT(f2.following) AS cnt
        FROM follow f1, follow f2, user u
        WHERE f1.following = f2.follower AND f1.follower = #{userId} AND f2.following != #{userId} AND u.id = f2.following AND f2.following NOT IN (
            SELECT f3.following
            FROM follow f3
            WHERE f3.follower = #{userId})
        GROUP BY f2.following
        ORDER BY cnt DESC, nickname
        LIMIT 50 OFFSET #{page}
    </select>

    <select id="getUsers" parameterType="String" resultType="My">
        SELECT T.id, T.name, T.nickname, T.file_url AS userFileUrl, IF(IFNULL(f.following, 0) = 0, 0, 1) AS isFollow, LENGTH(T.nickname) AS len
        FROM
            (SELECT *
             FROM user u
             WHERE nickname LIKE '${nickname}%') AS T LEFT OUTER JOIN follow f
            ON f.follower = #{userId} AND T.id = f.following
        ORDER BY len, isFollow DESC
        LIMIT 50
        OFFSET ${page}
    </select>

    <resultMap type="User" id="userInformation">
        <result column="id" property="id"/>
        <result column="email" property="email"/>
        <result column="name" property="name"/>
        <result column="nickname" property="nickname"/>
        <result column="file_url" property="userFileUrl"/>
        <result column="pencil" property="level.pencil"/>
        <result column="pencilOn" property="level.pencilOn"/>
        <result column="bookmark" property="level.bookmark"/>
        <result column="bookmarkOn" property="level.bookmarkOn"/>
        <result column="isFollow" property="isFollow"/>
        <result column="following" property="follow.following"/>
        <result column="follower" property="follow.follower"/>
    </resultMap>

<!--        <insert id="register" parameterType="Member" useGeneratedKeys="true" keyColumn="code" keyProperty="keyId">-->
<!--            insert into member(id, pw, email, mname, reg_date, phone, location_code, prefer)-->
<!--            values(#{userId}, #{pw}, #{email}, #{name}, now(), #{phone}, #{locationCode}, #{prefer})-->
<!--        </insert>-->

<!--        <select id="login" parameterType="Member" resultMap="memberLogin">-->
<!--            select member.code as code, id, pw, mname, phone, email, location_code, IFNULL(fileURL, "0") as fileURL, prefer-->
<!--            from member left outer join profile_image-->
<!--            on member.code = profile_image.code-->
<!--            where id like #{userId} and pw like #{pw}-->
<!--        </select>-->


<!--        <delete id="deleteMember" parameterType="Member">-->
<!--            delete from member-->
<!--            where id like #{userId} and pw like #{pw}-->
<!--        </delete>-->

<!--        <update id="setMemberInfo" parameterType="Member">-->
<!--            update member-->
<!--            set mname = #{name}, pw = #{pw}, phone = #{phone}, email = #{email}, location_code = #{locationCode}, prefer = #{prefer}-->
<!--            where id = #{userId}-->
<!--        </update>-->

<!--        <select id="checkId" parameterType="String" resultType="int">-->
<!--            select count(*)-->
<!--            from member-->
<!--            where id = #{userId}-->
<!--        </select>-->





</mapper>